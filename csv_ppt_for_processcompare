#!/usr/bin/env python
# -*- coding: UTF-8 -*-
### author: Fangjian DU

import numpy as np
import matplotlib as mp
import os,re,sys
import pandas as pd
import xlsxwriter
import xlrd,csv
from pptx import  Presentation
from pptx.util import Inches
import matplotlib.pyplot as plt

if len(sys.argv) < 2:
	print("Usage: process_compare.py pc.cfg ")
	print("make sure: process compare config file is needed, no excel files inside processing direcotry")
	print("a pc.cfg file looks like following:\nFoundry1 SMIC\nFoundry2 TSMC\nNode1 7\nNode2 7\nVariant1 SFP\nVariant2 G\nModelVer1 v1d0_rev3\n"
	print("ModelVer2 v1d2_2p4\nPath1 /home/fjdu/libs/smic7_pdkqa/Interactive.125.csv\nPath2 /home/fjdu/libs/tsmcInteractive.18.csv")
	exit(0)

### read the config file
inputs=[]

with open(sys.argv[1],'r') as cfg:
	for line in cfg:
		inputs.append(line.split()[1])

print(inputs)
fname1=inputs[0];
fname2=inputs[1];
node1=inputs[2];
node2=inputs[3];
pv1=inputs[4];
pv2=inputs[5];
modelv1=inputs[6];
modelv2=inputs[7];
csv1 = inputs[8]; 
csv2 = inputs[9];
### check csv files exist
if( not (os.path.isfile(csv1) or os.path.isfile(csv2))):
	print("Pls check the two csv files are into the right place")
	exit(0)
### read csv files and get the infos into excel
csv1_path=os.path.split(csv1)
csv2_path=os.path.split(csv2)
csv1_name=csv1_path[1]
csv2_name=csv2_path[1]

print("begin removing xlsx file and pics tables folder\n")
os.system('rm -rf ./*.xlsx; rm -rf ./*.ppt')
os.system('rm -rf pics; rm -rf tables')
os.system('mkdir ./pics; mkdir ./tables')

### new excel file 
os.system('/grid/common/bin/perl /local/method/scripts/processComparison/production/processComparison.pl pc.cfg')
workbook_name=fname1+"_"+node1+"_"+pv1+"_"+modelv1+"_vs_"+fname2+"_"+node2+"_"+pv2+"_"+modelv2+".xlsx"
def addtodict4(thedict,key_a,key_b,key_c,key_d,val):
	if key_a in thedict:
		if key_b in thedict[key_a]:
			if key_c in thedict[key_a][key_b]:
				thedict[key_a][key_b][key_c].update({key_d:val})
			else:
				thedict[key_a][key_b].update({key_c:{key_d:val}})
		else:
			thedict[key_a].update({key_b:{key_c:{key_d:val}}})
	else:
		thedict.update({key_a:{key_b:{key_c:{key_d:val}}}})

def excel_to_dict(sheet_nu,dict_name1,colno1,dict_name2,colno2):
	data=xlrd.open_workbook(workbook_name)
	table=data.sheet_by_index(sheet_nu)
	nrows = table.nrows
	ncols = table.ncols
	for i in range(2,nrows):
		if not (table.cell_value(i,colno1) == "" or table.cell_value(i,colno2) == "" ):
			addtodict4(dict_name1,table.cell_value(i,0),table.cell_value(i,1),table.cell_value(i,2),table.cell_value(i,3),table.cell_value(i,colno1))
			addtodict4(dict_name2,table.cell_value(i,0),table.cell_value(i,1),table.cell_value(i,2),table.cell_value(i,3),table.cell_value(i,colno2))

def excel_to_dict_sum(sheet_nu,dict_name,colno):
	data=xlrd.open_workbook(workbook_name)
	table=data.sheet_by_index(sheet_nu)
	nrows = table.nrows
	ncols = table.ncols
	for i in range(2,nrows):
		if not (table.cell_value(i,colno) == ""):
			addtodict4(dict_name,table.cell_value(i,0),table.cell_value(i,2),table.cell_value(i,3),table.cell_value(i,1),table.cell_value(i,colno))
			#print(str(table.cell_value(i,0))+"-"+str(table.cell_value(i,2))+"-"+str(table.cell_value(i,3))+"-"+str(table.cell_value(i,1))+"-"+str(table.cell_value(i,colno)))
		#else:
		#	addtodict4(dict_name,table.cell_value(i,0),table.cell_value(i,2),table.cell_value(i,3),table.cell_value(i,1),"NA")


def print_dict(thedict):
	for key1 in thedict:
		#print(str(key1))
		for key2 in thedict[key1]:
			#print(str(key1)+str(key2))
			for key3 in thedict[key1][key2]:
				#print (str(key1)+str(key2)+str(key3))
				#print(list(thedict[key1][key2][key3].values()))
				for key4 in thedict[key1][key2][key3]:
					print (str(key1)+str(key2)+str(key3)+str(key4))
					print(thedict[key1][key2][key3][key4])
					#if(thedict[key1][key2][key3][key4]>1000):
					#	print((thedict[key1][key2][key3][key4]))
def plot_dict(thedict1,thedict2):
	for key1 in thedict1:
		#print(str(key1))
		for key2 in thedict1[key1]:
			#print(str(key1)+str(key2))
			for key3 in thedict1[key1][key2]:
				device_list=[]
				val_list1=[]
				val_list2=[]
				for key4 in thedict1[key1][key2][key3]:
					device_list.append(str(key4))
					val_list1.append(thedict1[key1][key2][key3][key4])
					val_list2.append(thedict2[key1][key2][key3][key4])
					#print(type(thedict2[key1][key2][key3][key4]))
				#print(str(key1)+str(key2)+str(key3))
				#print(type(list(thedict2[key1][key2][key3].values())[0]))
				#print(list(thedict2[key1][key2][key3].values()))
				#print(val_list2)
				index = np.arange(len(device_list))
				bar_width = 0.35
				total_list=val_list1+val_list2
				plt.title(str(key1)+"_"+str(key2)+"_"+str(key3),fontsize='large') #设置字体大小与格式
				plt.bar(index, val_list1, width=bar_width, label=fname1,fc = 'y')
				plt.bar(index+bar_width, val_list2, width=bar_width, label=fname2,tick_label = device_list,fc = 'r')
				plt.xlabel('device')
				plt.xticks(index+bar_width/2, device_list)
				plt.ylim(min(total_list),max(total_list)*1.1)
				plt.legend(loc= 'upper left')
				pic_name=str(key1)+"_"+str(key2)+"_"+str(key3)
				pic_name=pic_name.replace("/","_")
				print(pic_name)
				plt.savefig("./pics/"+pic_name+".png")
				plt.close()
def plot_dict_sum(thedict1):
	import matplotlib.pyplot as plt2
	for key1 in thedict1:
		#print(str(key1))
		label_list=[]
		for key2 in thedict1[key1]:
			print(str(key1)+str(key2))
			label_list.append(str(key1)+str(key2))
			row_list=[]
			val_list=[]
			col_list=[]
			color_list=[]
			for key3 in thedict1[key1][key2]:
				val_list.append(list(thedict1[key1][key2][key3].values()))
				#print(list(thedict1[key1][key2][key3].values()))
				row_list.append(str(key3))
				col_list=list(thedict1[key1][key2][key3].keys())
				color_list_0=[]
				#col_list.append(str(key3))
				for key4 in thedict1[key1][key2][key3]:
					#print(thedict1[key1][key2][key3][key4])
					if (thedict1[key1][key2][key3][key4] > 5) or (thedict1[key1][key2][key3][key4] < -5):
						color_list_0.append("red")
					else:
						color_list_0.append("green")
				color_list.append(color_list_0)
			plt2.title(str(key1)+"_"+str(key2),fontsize='large') #设置字体大小与格式
			the_table=plt2.table(cellText=val_list, cellColours=color_list,rowLabels=row_list, colLabels=col_list,loc='best')
			plt2.axis('off')
			pic_name=str(key1)+"_"+str(key2)
			pic_name=pic_name.replace("/","_")
			#print(pic_name)
			plt2.savefig("./tables/"+pic_name+".png")
			plt2.close()
			#plt.show()
			#plt.show()
def plot_table_only():
	data=xlrd.open_workbook(workbook_name)
	table=data.sheet_by_index(0)
	nrows = table.nrows
	ncols = table.ncols
	var_list=[]
	for i in range(0,nrows):
		var_list0=[]
		for j in range(0, ncols):
			var_list0.append(table.cell_value(i,j))
		var_list.append(var_list0)
	the_table=plt.table(cellText=var_list,loc='best')
	plt.axis('off')
	plt.savefig("./tables/1.png")
	plt.close()

def to_ppt():
	ppt =Presentation()
	#blank_slide_layout = prs.slide_layouts[6] 
	#slide = ppt.slides.add_slide(blank_slide_layout)
	left =Inches(1)
	right =Inches(1)
	width =Inches(9)
	height =Inches(6)
	top=Inches(6)
	pic_list=[]
	table_list=[]

	#if os.path.isfile("./tables/1.png"):
	#	slide=ppt.slides.add_slide(ppt.slide_layouts[1])
	#	slide.shapes.add_picture("./tables/1.png",left,right,width,height)
	for root, dirs, files in os.walk("./tables"):
		for file in files:
			if file.endswith(".png"):
				pic_list.append(os.path.join(root, file))
				#print(os.path.join(root, file))
				#slide=ppt.slides.add_slide(ppt.slide_layouts[1])   #在ppt插入一个幻灯片
				#slide.shapes.add_picture(os.path.join(root, file), left, right, width, height)
				#slide.shapes.add_picture(img_path,left,right,width,height)
	for root, dirs, files in os.walk("./pics"):
		for file in files:
			if file.endswith(".png"):
				table_list.append(os.path.join(root, file))
				#slide=ppt.slides.add_slide(ppt.slide_layouts[1])   #在ppt插入一个幻灯片
				#slide.shapes.add_picture(os.path.join(root, file), left, right, width, height)
				#slide.shapes.add_picture(img_path,left,right,width,height)
	pic_list.sort()
	table_list.sort()

	for pics in pic_list:
		slide=ppt.slides.add_slide(ppt.slide_layouts[1])   #在ppt插入一个幻灯片with layout format 1
		slide.shapes.add_picture(pics,left,right,width,height)
	for tables in table_list:
		slide=ppt.slides.add_slide(ppt.slide_layouts[1])   #在ppt插入一个幻灯片with layout format 1
		slide.shapes.add_picture(tables,left,right,width,height)


	ppt.save("./Processcompare.ppt")
dict1=dict()
dict2=dict()
dict3=dict()
excel_to_dict(2,dict1,5,dict2,7)
excel_to_dict_sum(2,dict3,8)

#print_dict(dict3)
print("Begin reading the excel table: first sheet and transfer them into tables\n")
plot_table_only()
print("Begin reading the excel table: third sheet and transfer them into pictures\n")
plot_dict(dict1,dict2)
print("Begin reading the excel table: forth sheet and transfer them into tables\n")
plot_dict_sum(dict3)
print("Begin moving all the talbes and pics into PPT")
to_ppt()





